/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Test extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1592640800605993582L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test\",\"fields\":[{\"name\":\"comapny\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Test> ENCODER =
      new BinaryMessageEncoder<Test>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Test> DECODER =
      new BinaryMessageDecoder<Test>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Test> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Test> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Test> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Test>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Test to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Test from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Test instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Test fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence comapny;
   private java.lang.CharSequence color;
   private int price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Test() {}

  /**
   * All-args constructor.
   * @param comapny The new value for comapny
   * @param color The new value for color
   * @param price The new value for price
   */
  public Test(java.lang.CharSequence comapny, java.lang.CharSequence color, java.lang.Integer price) {
    this.comapny = comapny;
    this.color = color;
    this.price = price;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return comapny;
    case 1: return color;
    case 2: return price;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: comapny = (java.lang.CharSequence)value$; break;
    case 1: color = (java.lang.CharSequence)value$; break;
    case 2: price = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'comapny' field.
   * @return The value of the 'comapny' field.
   */
  public java.lang.CharSequence getComapny() {
    return comapny;
  }


  /**
   * Sets the value of the 'comapny' field.
   * @param value the value to set.
   */
  public void setComapny(java.lang.CharSequence value) {
    this.comapny = value;
  }

  /**
   * Gets the value of the 'color' field.
   * @return The value of the 'color' field.
   */
  public java.lang.CharSequence getColor() {
    return color;
  }


  /**
   * Sets the value of the 'color' field.
   * @param value the value to set.
   */
  public void setColor(java.lang.CharSequence value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public int getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(int value) {
    this.price = value;
  }

  /**
   * Creates a new Test RecordBuilder.
   * @return A new Test RecordBuilder
   */
  public static Test.Builder newBuilder() {
    return new Test.Builder();
  }

  /**
   * Creates a new Test RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Test RecordBuilder
   */
  public static Test.Builder newBuilder(Test.Builder other) {
    if (other == null) {
      return new Test.Builder();
    } else {
      return new Test.Builder(other);
    }
  }

  /**
   * Creates a new Test RecordBuilder by copying an existing Test instance.
   * @param other The existing instance to copy.
   * @return A new Test RecordBuilder
   */
  public static Test.Builder newBuilder(Test other) {
    if (other == null) {
      return new Test.Builder();
    } else {
      return new Test.Builder(other);
    }
  }

  /**
   * RecordBuilder for Test instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test>
    implements org.apache.avro.data.RecordBuilder<Test> {

    private java.lang.CharSequence comapny;
    private java.lang.CharSequence color;
    private int price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Test.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.comapny)) {
        this.comapny = data().deepCopy(fields()[0].schema(), other.comapny);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Test instance
     * @param other The existing instance to copy.
     */
    private Builder(Test other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.comapny)) {
        this.comapny = data().deepCopy(fields()[0].schema(), other.comapny);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'comapny' field.
      * @return The value.
      */
    public java.lang.CharSequence getComapny() {
      return comapny;
    }


    /**
      * Sets the value of the 'comapny' field.
      * @param value The value of 'comapny'.
      * @return This builder.
      */
    public Test.Builder setComapny(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.comapny = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'comapny' field has been set.
      * @return True if the 'comapny' field has been set, false otherwise.
      */
    public boolean hasComapny() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'comapny' field.
      * @return This builder.
      */
    public Test.Builder clearComapny() {
      comapny = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'color' field.
      * @return The value.
      */
    public java.lang.CharSequence getColor() {
      return color;
    }


    /**
      * Sets the value of the 'color' field.
      * @param value The value of 'color'.
      * @return This builder.
      */
    public Test.Builder setColor(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.color = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'color' field has been set.
      * @return True if the 'color' field has been set, false otherwise.
      */
    public boolean hasColor() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'color' field.
      * @return This builder.
      */
    public Test.Builder clearColor() {
      color = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public int getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public Test.Builder setPrice(int value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public Test.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @SuppressWarnings("unchecked")
    public Test build() {
      try {
        Test record = new Test();
        record.comapny = fieldSetFlags()[0] ? this.comapny : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.color = fieldSetFlags()[1] ? this.color : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Test>
    WRITER$ = (org.apache.avro.io.DatumWriter<Test>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Test>
    READER$ = (org.apache.avro.io.DatumReader<Test>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.comapny);

    out.writeString(this.color);

    out.writeInt(this.price);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.comapny = in.readString(this.comapny instanceof Utf8 ? (Utf8)this.comapny : null);

      this.color = in.readString(this.color instanceof Utf8 ? (Utf8)this.color : null);

      this.price = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.comapny = in.readString(this.comapny instanceof Utf8 ? (Utf8)this.comapny : null);
          break;

        case 1:
          this.color = in.readString(this.color instanceof Utf8 ? (Utf8)this.color : null);
          break;

        case 2:
          this.price = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










